select * 
from news n
where n.event in 

select e.name, e.date, e.time, v.name as vanue, s.name as sport
from events e, vanues  v, sports s
where e.vanue = v.id and e.sport = s.id
order by e.date , e.time
limit 3

select *
from vanues

select *
from sports

insert into events values
("400M FREESTYLE MEN", date("now"), time("now"),1, (select id from sports where name like "Swimming"))

select * from events

update events set sport=2 where oid = 5

insert into news (title, date, time, content, event, user) values 
(select title, date("now"), time("now"), content, event, user from news)


select id, event from news

update news set event = (select name from events where oid = 2) where id = 1

select e.name, s.name
from events e, sports s
where e.sport = s.id

select n.title as title,n.id as  news_link,  e.name as event, e.name as  events_link, s.name as sport,  s.id as  sports_link, n.datetime as datetime
from news n, events e, sports s
where n.event = e.name and e.sport = s.id

select n.title as title,n.id as  news_link, 
n.datetime as date, n.user as reporter, n.content as content,
p.link as pic
from news n, news_pics np, pictures p
where np.news = n.id and np.pic = (select id from pictures limit 1)

select s.name as sport, s.id as sports_link
from sports s

select * from news
create table pictures (
	id integer primary key autoincrement not null,
	link varchar(500) not null,
	des varchar(500) not null
)
select * from pictures
select * from news_pics

insert into news_pics (news, pic, user) values
(5, 5,"yuankunluo")

insert into pictures(link, des) values
("001.jpg","test"),
("002.jpg", "LOve"),
("003.jpg","love"),
("004.jpg","love"),
("005.jpg","love")

select n.title as title,n.id as  news_link,  c.count as comment
n.datetime as date, n.user as reporter, n.content as content,
p.link as pic
from news n, news_pics np, pictures p, 
(select news ,count(oid) as count
from comments
group by news
order by  count) c
where np.news = n.id and np.pic = (select id from pictures limit 1) and c.


insert into comments (news, user, content,datetime) values
(5,"yuankunluo","i",datetime("now"))

select * from news
select * from vanues
select * from addresses

insert into addresses (post_code, line_1) values
("E161XL","Royal Victoria Dock")

insert into vanues (name, city, address) values
("Aquatics Centre",2,1),
("Basketball Arena",2,1),
("BMX Track",2,1),
("Eton Manor",2,1),
("Copper Box",2,1),
("Velodrome",2,1),
("Riverbank Arena",2,1),
("Olympic Stadium",2,1),
("Water Polo Arena",2,1)

select v.name as vanue, v.id as  vanue_link
from vanues v

select s.name as vanue, s.id as  vanue_link
from sports s

select e.name as event, e.name as event_link
from events e

select * from athelets

select name as name, a2_code as name_link
from countries;

select * from athelets;

select * from events
update events set name = lower(name)

insert into events values
("I LOVE YOU", date("now"), time("now"), 1, 15)

select * from addresses
update addresses set post_code = lower(post_code), line_2 = lower(line_2)

select * from athelets

update athelets set first_name = lower(first_name), last_name=lower(last_name),
gender= lower(gender), country = lower(country)

update cities set postcode = lower(postcode),
country = lower(country), state = lower(state), name = lower(name)

update countries 
 set name =  lower(name)

update news 
set title =  lower(title),event =  lower(event)

update paticipants set event = lower(event)

update sports set name = lower(name)

select * from users

update users set
last_name = lower(last_name)

update vanues set name = lower(n

create table athelets (
first_Name varchar(255) not null, 
last_Name varchar(255) not null, 
gender char(1) not null, 
birth_date varchar(255) not null, 
country varchar(5) not null,  
pic integer,
primary key(first_name, last_name, gender, birth_date, country),
foreign key (country) references countries(a2_code),
foreign key (pic) references pictrues(id)
)

select * from athletes

insert into athelets (first_name, last_name, gender, birth_date, country)
values
(lower("Michael") ,lower("Phelps"), lower("m"),date("1988-11-06"),"us" )

select a.*, c.name
from athelets a, countries c
where a.country = c.a2_code

select * from countries
where a2_code = "bd"


create table teams
( name varchar(255) not null,
country varchar(255) not null,
primary key(name, country),
foreign key(country) references  countries(a2_code)
)

select * from sports

select oid from events
where name = "i love you"

update events set date ="2000-01-01" where oid = 6

insert into events(name, date, time, vanue, sport, type)
values 
("i love you too i love love", date("1988-08-22"), time("16:44"),1,3,"p")

select * from events 
where name = "i love you"

update events set type = "f" where vanue = 1

create table athletes (
	firstname varchar(255) not null,
	lastname varchar(255) not null,
	gender char(1) not null,
	birthday varchar(255) not null,
	country char(2) not null,
	pic integer,
	primary key(firstname, lastname, gender, birthday,country),
	foreign key (country) references countries(a2_code),
	foreign key (pic) references pictures(id)
)

select * from athletes

insert into athletes(firstname, lastname,gender, birthday,country)
values
("yuankun","luo","f","1988-11-06","cn")

select * from events

delete from events where rowid >6
delete from participants where rowid >0
delete from athletes where rowid >0

create table participants (
	event varchar(255) not null,
	athlete integer not null,
	rank integer not null,
	team varchar(255),
	result varchar(255),
	medal char(1),
	foreign key (event) references events(name),
	foreign key (athlete) references athletes(oid),
	primary key (event, athlete)
)

CREATE TABLE events (
	id integer not null primary key autoincrement,
    "name" VARCHAR(255) NOT NULL,
    "date" VARCHAR(255) NOT NULL,
    "time" VARCHAR(255) NOT NULL,
    "vanue" INTEGER NOT NULL,
    "sport" V NOT NULL,
    "type" CHAR(1) NOT NULL
)
insert into events (name, date, time, vanue, sport, type)
values 
("400m swimmfffdfsfffdfs","1988-11-06","12:30","1","1","p")

CREATE TABLE participants (
	event integer not null,
	athlete integer not null,
	rank integer not null,
	team varchar(255),
	result varchar(255),
	medal char(1),
	foreign key (event) references events(id),
	foreign key (athlete) references athletes(oid),
	primary key (event, athlete)
)

select e.name as event, e.date as date, e.time as time, v.name as v.vanue


CREATE TABLE users (
id integer not null primary key autoincrement,
username varchar(255) not null,
email varchar(255) not null,
pass varchar(255) not null,
first_name varchar(255) not null,
last_name varchar(255) not null,
gender char(1) not null,
birth_date varchar(255) not null,
city integer not null,
address integer not null,
register_time varchar(255) not null,
face_pic varchar(255),
reporter boolean not null,
foreign key (city) references cities(id) on update no action on delete no action,
foreign key (address) references addresses(id) on update cascade on delete cascade,
foreign key (face_pic) references pictures(id) on update cascade on delete cascade
)

create table news (
	id integer not null primary key autoincrement,
	datetime varchar(255) not null,
	user integer not null,
	content text not null,
	title varchar(255) not null,
	event integer not null,
	foreign key(user) references users(id),
	foreign key(event) references events(id)
)

insert into news (datetime, user, content, title, event)
values 
(datetime("now"), 1,"I love you love you","i love you love you",1)

insert into users(username, email, pass, firstname, lastname, gender, birthday,city,address, registertime,reporter)
values 
("yuankun","y@q.com","123","Yuankun","Luo","m","1988-11-06",1,1,datetime("now"), 0)

CREATE TABLE users (
    "id" INTEGER NOT NULL primary key,
    "username" VARCHAR(255) NOT NULL,
    "email" VARCHAR(255) NOT NULL,
    "pass" VARCHAR(255) NOT NULL,
    "firstname" VARCHAR(255) NOT NULL,
    "lastname" VARCHAR(255) NOT NULL,
    "gender" CHAR(1) NOT NULL,
    "birthday" VARCHAR(255) NOT NULL,
    "city" INTEGER NOT NULL,
    "address" INTEGER NOT NULL,
    "registertime" VARCHAR(255) NOT NULL,
    "facepic" VARCHAR(255),
    "reporter" BOOLEAN NOT NULL,
    foreign key (city) references cities(id),
    foreign key(address) references addresses(id),
    foreign key(facepic) references pictures(id)
)

select e.name as event, e.date, e.time, v.name as vanue,
s.name as sport
from events e, vanues  v, sports s 
where e.vanue = v.id and e.sport = s.id and e.id =1



select n.title as title,n.id as news_link, n.datetime as date, 
n.user as reporter, n.content as content,p.link as pic, s.name as sport, s.id as sports_link, c.count as comment
from news n, pictures p, events as e, sports as s,
(select news as cid,count(oid) as count
from comments
group by cid
order by  count) c, 
(select news as nid , pic as pid
from news_pics
group by news) np
where np.nid = n.id and n.id = np.nid and np.pid = p.id and c.cid= n.id and n.event = e.name and e.sport = s.id
order by comment desc
limit 10



select n.title as title,n.id as news_link, n.datetime as date, 
u.name as reporter, n.content as content,p.link as pic, s.name as sport, 
s.id as sports_link, c.count as comment
from news n, pictures p, events e, sports  s, users u,
(select news as cid,count(oid) as count
from comments
group by cid
order by  count) c, 
(select news as nid , pic as pid
from news_pics
group by news) np
where np.nid = n.id and n.id = np.nid and np.pid = p.id and c.cid= n.id and n.event = e.name and e.sport = s.id
order by comment desc
limit 10

select news as cid,count(oid) as count
	from comments
	group by cid
	order by  count

select news as nid , pic as pid
	from news_pics
	group by news
	
	
select n.title as title,n.id as news_link, n.datetime as date, 
u.name as reporter, n.content as content,p.link as pic, s.name as sport, 
s.id as sports_link, c.count as comment
from news n, pictures p, events e, sports  s, users u,
	(select news as cid,count(oid) as count
	from comments
	group by cid
	order by  count) c, 
	(select news as nid , pic as pid
	from news_pics
	group by news) np
where np.nid = n.id and n.id = np.nid and np.pid = p.id and c.cid= n.id and n.event = e.id and e.sport = s.id and e.id = 1
order by comment desc


select e.name as event, e.id as event_link
from events e

select s.name as sport, s.id as  sport_link
from sports s



select n.title as title,n.id as news_link, n.datetime as date, 
u.name as reporter, n.content as content,p.link as pic, s.name as sport, 
s.id as sports_link, c.count as comment
from news n, pictures p, events e, sports  s, users u,
	(select news as cid,count(oid) as count
	from comments
	group by cid
	order by  count) c, 
	
	(select news as nid , pic as pid
	from news_pics
	group by news) np
where np.nid = n.id and n.id = np.nid and np.pid = p.id and c.cid= n.id and n.event = e.id and e.sport = s.id
order by comment desc

select (a.firstname || " "||a.lastname) as athlete, a.rowid as athletes_link,
p.rank as rank, p.medal as medal, 
from events e, participants p, athletes a
where e.id = p.event and p.athlete = a.rowid and e.id=8
order by rank

select n.title as title, n.id as news_link, u.name as reporter 
from news n,  events e, users u
where n.event = e.id and e.id = 8



select e.name as event, e.id as events_link,e.date, e.time, v.name as vanue,
s.name as sport, s.id as sports_link
from events e, vanues  v, sports s 
where e.vanue = v.id and e.sport = s.id
order by date,time 

select n.title as title, n.id as news_link, n.datetime, u.name as reporter,e.name as event, e.id as events_link
from news n, events e, users u
where n.event = e.id and n.user = u.id
order by datetime, event

select s.name as sport, s.id as sports_link, c.event_count as events, s.id as events_link
from sports s,
	(select count(e.id) as event_count, e.sport as sport
	from events e
	group by sport) c
where s.id = c.sport

select (a.firstname || " " || a.lastname) as name, a.rowid as athletes_link, a.birthday as birthday, c.name as country
from athletes a, countries c
where a.country = c.a2_code
group by country, name


select (a.firstname || " "||a.lastname) as athlete, a.rowid as athletes_link,
p.rank as rank, p.medal as medal, c.name as country, p.team as team
from events e, participants p, athletes a, countries c
where e.id = p.event and p.athlete = a.rowid and a.country = c.a2_code and e.id=?
order by rank

CREATE TABLE participants (
	event integer not null,
	athlete integer not null,
	rank integer not null,
	team varchar(255) default "",
	result varchar(255) default "",
	medal char(1) default "",
	foreign key (event) references events(id),
	foreign key (athlete) references athletes(oid),
	primary key (event, athlete)
)

CREATE TABLE athletes (
	firstname varchar(255) not null,
	lastname varchar(255) not null,
	gender char(1) not null,
	birthday varchar(255) not null,
	country char(2) not null,
	pic integer default "person.jpg",
	primary key(firstname, lastname, gender, birthday,country),
	foreign key (country) references countries(a2_code),
	foreign key (pic) references pictures(id)
)

CREATE TABLE addresses (
	id integer primary key autoincrement,
	post_code char(10) not null,
	line_1 varchar(255) not null,
	line_2 varchar(255) default ""
)
CREATE TABLE cities (
	id integer primary key autoincrement, 
	postcode varchar(20) not null,
	country char(2) not null,
	state varchar(255) not null,
	name varchar(255) not null,
	foreign key (country) references countries(a2_code) on update no action  on delete no action
)

CREATE TABLE athletes (
	id integer not null primary key autoincrement,
	firstname varchar(255) not null,
	lastname varchar(255) not null,
	gender char(1) not null,
	birthday varchar(255) not null,
	country char(2) not null,
	pic integer default "person.jpg",
	foreign key (country) references countries(a2_code),
	foreign key (pic) references pictures(id)
)

-- Describe EVENTS
CREATE TABLE events (
    "id" INTEGER NOT NULL primary key,
    "name" VARCHAR(255) NOT NULL,
    "date" VARCHAR(255) NOT NULL,
    "time" VARCHAR(255) NOT NULL,
    "vanue" INTEGER NOT NULL,
    "sport" V NOT NULL,
    "type" VARCHAR(255) NOT NULL
)


select e.name as event, e.date, e.time, v.name as vanue, e.type as type,
s.name as sport, s.id as sports_link
from events e, vanues  v, sports s 
where e.vanue = v.id and e.sport = s.id and e.id =?

delete from participants where rowid >=0


select e.name as event, e.id as events_link,e.date, e.time, v.name as vanue,
s.name as sport, s.id as sports_link
from events e, vanues  v, sports s 
where e.vanue = v.id and e.sport = s.id and e.type like "Team%"
order by sport,date,time

select * from events
where type like "Solo%"

select (name || " -- " || type) as name, id as events_link
from events


-- Describe NEWS
CREATE TABLE news (
	id integer not null primary key autoincrement,
	datetime varchar(255) not null,
	user integer not null,
	content text not null,
	title varchar(255) not null,
	event integer default 0,
	foreign key(user) references users(id),
	foreign key(event) references events(id)
)


-- Describe USERS
CREATE TABLE users (
    "id" INTEGER NOT NULL primary key autoincrement,
    "name" VARCHAR(255) NOT NULL,
    "email" VARCHAR(255) NOT NULL,
    "pass" VARCHAR(255) NOT NULL,
    "firstname" VARCHAR(255) NOT NULL,
    "lastname" VARCHAR(255) NOT NULL,
    "gender" CHAR(1) NOT NULL,
    "birthday" VARCHAR(255) NOT NULL,
    "address" INTEGER NOT NULL,
    "registertime" VARCHAR(255) NOT NULL,
    "pic" VARCHAR(255) default "person.jpg",
    "reporter" BOOLEAN NOT NULL,
    "country" integer not null,
    foreign key(pic) references pictures(id),
    foreign key(address) references address(id),
    foreign key(country) references country(a2_code)
)

-- Describe USERS
CREATE TABLE users (
    "id" INTEGER NOT NULL primary key autoincrement,
    "email" VARCHAR(255) NOT NULL,
    "password" VARCHAR(255) NOT NULL,
    "firstname" VARCHAR(255) NOT NULL,
    "lastname" VARCHAR(255) NOT NULL,
    "gender" CHAR(1) NOT NULL,
    "birthday" VARCHAR(255) NOT NULL,
    "address" INTEGER NOT NULL,
    "registertime" VARCHAR(255) NOT NULL,
    "pic" VARCHAR(255) default "person.jpg",
    "reporter" BOOLEAN default 0 ,
    "country" integer not null,
    foreign key(pic) references pictures(id),
    foreign key(address) references address(id),
    foreign key(country) references country(a2_code)
)

select n.title as title,n.id as news_link, n.datetime as date, 
(u.firstname ||" "||u.lastname )as reporter, n.content as content,p.link as pic, s.name as sport, 
s.id as sports_link, c.count as comment
from news n, pictures p, events e, sports  s, users u,
	(select news as cid,count(oid) as count
	from comments
	group by cid
	order by  count) c, 
	
	(select news as nid , pic as pid
	from news_pics
	group by news) np
where np.nid = n.id and n.id = np.nid and np.pid = p.id and c.cid= n.id and n.event = e.id and e.sport = s.id
order by comment desc


-- Describe USERS
CREATE TABLE users (
    "id" INTEGER NOT NULL primary key autoincrement,
    "email" VARCHAR(255) NOT NULL,
    "password" VARCHAR(255) NOT NULL,
    "firstname" VARCHAR(255) NOT NULL,
    "lastname" VARCHAR(255) NOT NULL,
    "gender" CHAR(1) NOT NULL,
    "birthday" VARCHAR(255) NOT NULL,
    "registertime" VARCHAR(255) NOT NULL,
    "pic" VARCHAR(255) default "person.jpg",
    "reporter" BOOLEAN default 0 ,
    foreign key(pic) references pictures(id)
)

-- Describe COMMENTS
CREATE TABLE comments (
	id integer  primary key autoincrement,
	news integer not null,
	user integer not null,
	content text not null,
	datetime  varchar(255) not null,
	foreign key (news) references news(id) on delete no action on update no action,
	foreign key (user) references users(id) on delete no action on update no action
)


-- Describe NEWS_PICS
CREATE TABLE news_pics (
	id integer  primary key autoincrement,
	news integer not null,
	pic integer not null,
	user varchar(255) not null,
	foreign key (news) references news(id) on delete no action on update no action,
	foreign key (pic) references pictures(id) on delete cascade on update cascade,
	foreign key (user) references users(id) on delete no action on update no action
)

-- Describe VANUES2
CREATE TABLE vanues2 (
	id integer primary key autoincrement,
	name varchar(255 ) not null
)

insert into vanues2(name)
select name 
from vanues


-- Describe USERS
CREATE TABLE users (
    "id" INTEGER NOT NULL p
    rimary key autoincrement,
    "name" varchar(255) not null,
    "email" VARCHAR(255) NOT NULL,
    "password" VARCHAR(255) NOT NULL,
    "firstname" VARCHAR(255) NOT NULL,
    "lastname" VARCHAR(255) NOT NULL,
    "gender" CHAR(1) NOT NULL,
    "birthday" VARCHAR(255) NOT NULL,
    "country" varchar(255) not null,
    "registertime" VARCHAR(255) NOT NULL,
    "pic" VARCHAR(255) default "person.jpg",
    "reporter" BOOLEAN default 0 ,
    foreign key(pic) references pictures(id),
    foreign key(country) references countries(a2_code)
)


insert into news (datetime, user, content, title, event)
values 

-- Describe USERS
CREATE TABLE users (
    "id" INTEGER NOT NULL primary key autoincrement,
    "name" varchar(255) not null,
    "email" VARCHAR(255) NOT NULL,
    "password" VARCHAR(255) NOT NULL,
    "firstname" VARCHAR(255) NOT NULL,
    "lastname" VARCHAR(255) NOT NULL,
    "gender" CHAR(1) NOT NULL,
    "birthday" VARCHAR(255) NOT NULL,
    "country" varchar(255) not null,
    "registertime" VARCHAR(255) NOT NULL,
    "pic" VARCHAR(255) default "person.jpg",
    "reporter" BOOLEAN default 0 ,
    foreign key(pic) references pictures(id),
    foreign key(country) references countries(a2_code)
)
CREATE TABLE users (
    "id" INTEGER NOT NULL primary key autoincrement,
    "name" varchar(255) not null,
    "email" VARCHAR(255) NOT NULL,
    "password" VARCHAR(255) NOT NULL,
    "firstname" VARCHAR(255) NOT NULL,
    "lastname" VARCHAR(255) NOT NULL,
    "gender" CHAR(1) NOT NULL,
    "birthday" VARCHAR(255) NOT NULL,
    "country" varchar(255) not null,
    "registertime" VARCHAR(255) not null,
    "pic" VARCHAR(255) default "person.jpg",
    "reporter" BOOLEAN default 0 ,
    foreign key(pic) references pictures(id),
    foreign key(country) references countries(a2_code)
)

select datetime("now")




-- Describe EVENTS2
CREATE TABLE "events" (
    "id" INTEGER NOT NULL primary key,
    "name" VARCHAR(255) NOT NULL,
    "date" VARCHAR(255) NOT NULL,
    "time" VARCHAR(255) NOT NULL,
    "vanue" INTEGER NOT NULL,
    "sport" V NOT NULL,
    "type" VARCHAR(255) NOT NULL,
    "user" integer not null default 1,
    foreign key (vanue) references vanues(id),
    foreign key (sport) references sports(id),
    foreign key (user) references users(id)
)

select * from events

insert into events (name, date, time, vanue, sport, type)
select name, date, time, vanue, sport, type 
from events2

select n.title as title, n.id as news_link, n.datetime, u.name as reporter,e.name as event, e.id as events_link
from news n, events e, users u
where n.event = e.id and n.user = u.id
order by datetime, event

delete from news where rowid >0

select title , user from news

delete from news where user =4


-- Describe NEWSPICS
CREATE TABLE "facepics" (
	id integer  primary key autoincrement,
	news integer not null,
	pic integer not null,
	user varchar(255) not null,
	foreign key (news) references news(id) on delete no action on update no action,
	foreign key (pic) references pictures(id) on delete cascade on update cascade,
	foreign key (user) references users(id) on delete no action on update no action
)

delete from pictures where rowid >=0

select (a.firstname || " " || a.lastname || " -- " || c.name) as name, a.id as athletes_link
from athletes a, countries c
where a.country = c.a2_code
order by  c.name, a.firstname, a.lastname

select (n.title || " -- " || date(n.datetime) )as title, n.id as news_link
from news  n
order by n.datetime

select n.title as title, n.id as news_link, n.datetime, u.name as reporter
from news n, users u
where n.user = u.id and event != null
order by datetime

update athletes set firstname = "yuankunyuan" where id = 50



select n.name as title,n.id as news_link, n.datetime as date, 
(u.firstname ||" "||u.lastname )as reporter, n.content as content,p.link as pic, s.name as sport, 
s.id as sports_link, c.count as comment
from news n, pictures p, events e, sports  s, users u,
	(select news as cid,count(oid) as count
	from comments
	group by cid
	order by  count) c, 
	(select news as nid , pic as pid
	from newspics
	group by news) np
where np.nid = n.id and n.id = np.nid and np.pid = p.id and c.cid= n.id and n.event = e.id and e.sport = s.id
order by comment desc

select n.name as title, p.link as link, n.id
from news n, newspics np, pictures p
where n.id = np.news and np.pic = p.id

insert into comments (news, user, content, datetime)
values 
(11,5, "Look my example: jsfiddle. Everything is working. If the image is larger than 600 px, then it resized.

You made ​​a mistake in the name of the class ImageContainer in html.", datetime("now"))

select * from news
where id = 10

select  p.link, p.des, u.name
from news n, newspics np, pictures p, users u
where n.id = np.news and np.pic = p.id and np.user = u.id and n.id = 10


select n.id as id, u.name as reporter, n.datetime as datetime, n.content as content, n.name as name
from news n, users u
where n.user = u.id and n.id = 10

select e.name as event, e.date, e.time, v.name as vanue, e.type as type,
s.name as sport, s.id as sports_link
from events e, vanues  v, sports s , news n
where e.vanue = v.id and e.sport = s.id and e.id = n.event

select u.name as user, c.content as comments, c.datetime as datetime
from users u, comments c, news n
where c.user = u.id and c.news = n.id and n.id = 10

update news set name = "i love mike mick" where id = 11



select n.name as title,n.id as news_link, n.datetime as date, 
(u.firstname ||" "||u.lastname )as reporter, n.content as content,p.link as pic, s.name as sport, 
s.id as sports_link, c.count as comment
from news n, pictures p, events e, sports  s, users u,
	(select news as cid,count(oid) as count
	from comments
	group by cid
	order by  count) c, 
	
	(select news as nid , pic as pid
	from newspics
	group by news) np
where np.nid = n.id and n.id = np.nid and np.pid = p.id and c.cid= n.id and n.event = e.id and e.sport = s.id
group by title
order by comment desc



select n.name as title,n.id as news_link, n.datetime as date, 
(u.firstname ||" "||u.lastname )as reporter, n.content as content,p.link as pic, s.name as sport, 
s.id as sports_link, c.count as comment
from news n, pictures p, events e, sports s, users u,
	(select news as cid,count(oid) as count
	from comments
	group by cid
	order by  count) c, 
	
	(select news as npnid , pic as pid
	from newspics
	group by news) np
where np.npnid = n.id and np.pid = p.id and c.cid= n.id and n.event = e.id and e.sport = s.id
order by comment desc

insert into pictures (link, des)
values 
("default.jpg","Default Pics")

select u.name as name, p.link as pic, c.datetime as datetime, c.content as comment, p.des as picdes
from comments c, users u, pictures p, news n
where c.user = u.id and u.pic = p.id and c.news = n.id and n.id = 11
order by datetime desc

-- Describe EVENTS
CREATE TABLE events (
    "id" INTEGER NOT NULL primary key autoincrement,
    "name" VARCHAR(255) NOT NULL,
    "date" VARCHAR(255) NOT NULL,
    "time" VARCHAR(255) NOT NULL,
    "vanue" INTEGER NOT NULL,
    "sport" V NOT NULL,
    "type" VARCHAR(255) NOT NULL,
    "user" INTEGER NOT NULL
)

-- Describe NEWS
CREATE TABLE news (
    "id" INTEGER Primary Key AUTOINCREMENT,
    "datetime" VARCHAR(255) NOT NULL,
    "user" INTEGER NOT NULL,
    "content" TEXT NOT NULL,
    "name" VARCHAR(255) NOT NULL,
    "event" INTEGER DEFAULT (0)
)

   select u.id as id, u.name as name, email as email, firstname as firstname, 
   lastname as lastname, gender as gender, birthday as birthday, 
   c.name as country, p.link as pic, p.des as picdes
   from users u, pictures p, countries c
   where u.pic = p.id and  c.a2_code = u.country and u.id = 1
   
   -- Describe USERS
CREATE TABLE users (
    "id" INTEGER Primary key autoincrement,
    "name" VARCHAR(255) NOT NULL,
    "email" VARCHAR(255) NOT NULL,
    "password" VARCHAR(255) NOT NULL,
    "firstname" VARCHAR(255) NOT NULL,
    "lastname" VARCHAR(255) NOT NULL,
    "gender" CHAR(1) NOT NULL,
    "birthday" VARCHAR(255) NOT NULL,
    "country" VARCHAR(255) NOT NULL,
    "registertime" VARCHAR(255) NOT NULL,
    "pic" VARCHAR(255) DEFAULT (21),
    "reporter" BOOLEAN DEFAULT (0)
)

delete from pictures where id != 21

select a.firstname as firstname,  a.lastname as lastname,
 a.gender as gender,  a.birthday as birthday, c.name as country, a.pic as pic
from athletes a, countries c
where a.country = c.a2_code and a.id = 68  

select n.name as title, n.id as news_link, n.datetime as datetime
from events e, participants p, athletes a, news  n
where e.id = p.event and p.athlete = a.id and n.event = e.id and 
order by datetime

select a.id as id, (a.firstname ||" "|| a.lastname) as name, a.firstname as firstname,  a.lastname as lastname,
 a.gender as gender,  a.birthday as birthday, c.name as country, a.pic as pic
from athletes a, countries c
where a.country = c.a2_code and a.id = 68

-- Describe NEWSPICS
CREATE TABLE "athletespics" (
	id integer  primary key autoincrement,
	athlete integer not null,
	pic integer not null,
	user varchar(255) not null,
	foreign key (athlete) references athletes(id) on delete no action on update no action,
	foreign key (pic) references pictures(id) on delete cascade on update cascade,
	foreign key (user) references users(id) on delete no action on update no action
)

select a.id as id, (a.firstname ||" "|| a.lastname) as name, a.firstname as firstname,  a.lastname as lastname,
 a.gender as gender,  a.birthday as birthday, c.name as country, p.link as pic
from athletes a, countries c, pictures p
where a.country = c.a2_code and a.pic = p.id and a.id = 69

update athletes set pic = 1 where id >0

insert into 

-- Describe PICTURES
CREATE TABLE pictures (
	id integer primary key autoincrement not null,
	link varchar(500) not null,
	des varchar(500) not null
)

insert into pictures (link, des) 
values
("default.jpg","Default jpg")

select  p.link, p.des, a.firstname
from athletes a, athletespics ap, pictures p, users u
where a.id =ap.athlete and ap.pic = p.id and ap.user = u.id


select u.id as id, u.name as name, u.email as email, u.firstname as firstname, 
   u.lastname as lastname, u.gender as gender, u.birthday as birthday, 
   c.name as country, p.link as pic, p.des as picdes
   from users u, pictures p, countries c
   where u.pic = p.id and  c.a2_code = u.country and u.id =1
   
 -- Describe ATHLETES
CREATE TABLE athletes (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "firstname" VARCHAR(255) NOT NULL,
    "lastname" VARCHAR(255) NOT NULL,
    "gender" CHAR(1) NOT NULL,
    "birthday" VARCHAR(255) NOT NULL,
    "country" CHAR(2) NOT NULL,
    "pic" INTEGER DEFAULT (1)
)

delete from athletes wher

select n.name as title,n.id as news_link, n.datetime as date, 
(u.firstname ||" "||u.lastname )as reporter, n.content as content,p.link as pic, s.name as sport, 
s.id as sports_link, c.count as comment
from news n, pictures p, events e, sports s, users u,
	(select news as nid,count(oid) as count
	from comments
	group by nid
	order by  count) c, 
	(select ns.news as npnid , ns.pic as pid
	from newspics ns
	group by news) np
where np.npnid = n.id and np.pid = p.id and c.nid= n.id and n.event = e.id and e.sport = s.id 
group by news_link
order by comment desc


select *
from comments

select e.name as event, p.medal as medal
from events e, participants p, countries c
group by  p.team

select e.name as event, e.id as events_link,  e.type as type, e.date as date, 
p.rank as rank, p.result as result,s.name as sport , s.id as sports_link
from events e, participants p, athletes a, sports s
where p.event = e.id and p.athlete = a.id and p.medal NOT IN ("g","s","b") and e.sport = s.id and a.id = 25
order by p.rank


select e.name as event, e.id as events_link, e.type as type, p.medal as medal, p.result as result
from events e, participants p, athletes a
where p.event = e.id and p.athlete = a.id and a.id = ?
order by p.rank


   select u.id as id, u.name as name, u.email as email, u.firstname as firstname, 
   u.lastname as lastname, u.gender as gender, u.birthday as birthday, 
   c.name as country, p.link as pic, p.des as picdes
   from users u, pictures p, countries c
   where u.pic = p.id and  c.a2_code = u.country and u.id = 11
   
   
   
-- Describe USERS
CREATE TABLE users (
    "id" INTEGER primary key autoincrement not null,
    "name" VARCHAR(255) NOT NULL,
    "email" VARCHAR(255) NOT NULL,
    "password" VARCHAR(255) NOT NULL,
    "firstname" VARCHAR(255) NOT NULL,
    "lastname" VARCHAR(255) NOT NULL,
    "gender" CHAR(1) NOT NULL,
    "birthday" VARCHAR(255) NOT NULL,
    "country" VARCHAR(255) NOT NULL,
    "registertime" VARCHAR(255) NOT NULL,
    "pic" VARCHAR(255) DEFAULT (1),
    "reporter" BOOLEAN DEFAULT (0)
)


insert into users (name, email, password, firstname, lastname, gender, birthday, country, registertime,pic,reporter)
values 
("test", "admin@g.com", "123","yuankun", "luo","m","1988-11-06","cn",datetime("now" ), 1,0)


CREATE TABLE "vanues" (
	id integer primary key autoincrement,
	name varchar(255 ) not null
)


-- Describe SPORTS
CREATE TABLE sports (
	id integer primary key autoincrement,
	name varchar(255) not null
	)
	
insert into sports (name)values 
("Alpine Skiing"),
("Cross-Country"),
("Freestyle Skiing"),
("Nordic Combined"),
("Ski Jumping"),
("Biathlon"),
("Curling"),
("Ice Hockey"),
("Short Track"),
("Snowboard"),
("Bobsleigh"),
("Figure Skating"),
("Luge"),
("Skeleton"),
("Speed Skating")

delete from pictures where id != 1

insert into vanues(name) values 
("Fisht Olympic Stadium"),("Bolshoy Ice Dome"),("Shayba Arena"),("Adler Arena Skating Center"),("Iceberg Skating Palace"),("Ice Cube Curling Center"),("Main Olympic village"),("International broadcasting centre and main press room"),("Laura Biathlon & Ski Complex"),("Rosa Khutor Extreme Park"),("Rosa Khutor Alpine Resort"),("Sliding Center Sanki"),("RusSki Gorki Jumping Center"),("Rosa Khutor Plateau Olympic Village")

select e.name as name, e.id as events_link, e.date as date,
e.time as time, v.name as vanue, e.type as type
from events e, sports s, vanues v, news n
where e.sport = s.id and e.type like "Solo%" and e.vanue = v.id

select *
from events e, news n, sport s
where e.sport = s.id and e.news =n.id and s.id = 1

select u.name as name, u.id as uid, p.link as pic, c.datetime as datetime, c.content as comment, p.des as picdes
from comments c, users u, pictures p, news n
where c.user = u.id and u.pic = p.id and c.news = n.id and n.id = ?
order by datetime desc


--      country result
select *
from 
	(select c.name as country, p.team as team,
	p.medal as medal
	from countries c, athletes a, events e, participants p
	where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
	and medal = "g"
	group by p.team
	order by c.a2_code) mg,
	(select c.name as country, p.team as team,
	p.medal as medal
	from countries c, athletes a, events e, participants p
	where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
	and medal = "b"
	group by p.team
	order by c.a2_code) mb,
	(select c.name as country, p.team as team,
	p.medal as medal
	from countries c, athletes a, events e, participants p
	where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
	and medal = "s"
	group by p.team
	order by c.a2_code) ms,
	countries c
where c. = ms.country and c

select *
from 
	-- select result g
	(select c.name as country, c.a2_code as countries_link , count(cs.medal) as silber
	from 
	(select c.a2_code as country, p.team as team,
		p.medal as medal
		from countries c, athletes a, events e, participants p
		where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
		and medal = "g"
		group by p.team
		order by c.a2_code)  cs,
		countries c
	where c.a2_code = cs.country
	group by country)  mg,
	-- select result b
	(select c.name as country, c.a2_code as countries_link , count(cs.medal) as silber
	from 
	(select c.a2_code as country, p.team as team,
		p.medal as medal
		from countries c, athletes a, events e, participants p
		where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
		and medal = "s"
		group by p.team
		order by c.a2_code)  cs,
		countries c
	where c.a2_code = cs.country
	group by country)  ms,
	-- Select result gold
	(select c.name as country, c.a2_code as countries_link , count(cs.medal) as silber
	from 
	(select c.a2_code as country, p.team as team,
		p.medal as medal
		from countries c, athletes a, events e, participants p
		where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
		and medal = "b"
		group by p.team
		order by c.a2_code)  cs,
		countries c
	where c.a2_code = cs.country
	group by country)  mb

	
	
select c.name as country, c.a2_code as countries_link , count(cs.medal) as silber
	from 
	(select c.a2_code as country, p.team as team,
		p.medal as medal
		from countries c, athletes a, events e, participants p
		where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
		and medal = "g"
		group by p.team
		order by c.a2_code)
		

select *
from 
	(select c.a2_code as a2_code , count(cs.medal) as silber
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "g"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) mg 
		,
	(select c.a2_code as a2_code , count(cs.medal) as silber
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "s"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country)  ms
		,
(select c.a2_code as a2_code , count(cs.medal) as silber
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "b"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) as mb
where mg.a2_code = ms.a2_code and ms.a2_code = mb.a2_code




------------------------
(select c.a2_code as a2_code, mg.gold as gold
from countries c
left join (select c.a2_code as a2_code , count(cs.medal) as gold
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "g"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) mg 
		on c.a2_code= mg.a2_code) cg
		
		
		
----------------
select cc.name as name, cg.g as g, cs.s as s, cb.b as b
from 
------------------------
(select c.a2_code as a2_code, mg.gold as g
from countries c
left join (select c.a2_code as a2_code , count(cs.medal) as gold
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "g"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) mg 
		on c.a2_code= mg.a2_code) cg
		--------------------------
		,
(select c.a2_code as a2_code, mg.gold as s
from countries c
left join (select c.a2_code as a2_code , count(cs.medal) as gold
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "s"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) mg 
		on c.a2_code= mg.a2_code) cs
		------------------------------
		,
		(select c.a2_code as a2_code, mg.gold as b
from countries c
left join (select c.a2_code as a2_code , count(cs.medal) as gold
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "b"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) mg 
		on c.a2_code= mg.a2_code) cb,
		countries cc
where cc.a2_code = cb.a2_code and cb.a2_code = cs.a2_code and cs.a2_code = cg.a2_code






-------------------------------------------------------------------------
select cc.name as name,  cc.a2_code as countries_link, cg.g as g, cs.s as s, cb.b as b
from 
(select c.a2_code as a2_code, mg.gold as g
from countries c
left join (select c.a2_code as a2_code , count(cs.medal) as gold
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "g"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) mg 
		on c.a2_code= mg.a2_code) cg
		--------------------------
		,
(select c.a2_code as a2_code, mg.gold as s
from countries c
left join (select c.a2_code as a2_code , count(cs.medal) as gold
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "s"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) mg 
		on c.a2_code= mg.a2_code) cs
		------------------------------
		,
		(select c.a2_code as a2_code, mg.gold as b
from countries c
left join (select c.a2_code as a2_code , count(cs.medal) as gold
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "b"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) mg 
		on c.a2_code= mg.a2_code) cb,
		countries cc
where cc.a2_code = cb.a2_code and cb.a2_code = cs.a2_code and cs.a2_code = cg.a2_code


select cc.name as country, cc.a2_code as countries_link, cg.g as g, cs.s as s, cb.b as b
from 
(select c.a2_code as a2_code, mg.gold as g
from countries c
left join (select c.a2_code as a2_code , count(cs.medal) as gold
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "g"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) mg 
		on c.a2_code= mg.a2_code) cg
		--------------------------
		,
(select c.a2_code as a2_code, mg.gold as s
from countries c
left join (select c.a2_code as a2_code , count(cs.medal) as gold
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "s"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) mg 
		on c.a2_code= mg.a2_code) cs
		------------------------------
		,
		(select c.a2_code as a2_code, mg.gold as b
from countries c
left join (select c.a2_code as a2_code , count(cs.medal) as gold
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "b"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) mg 
		on c.a2_code= mg.a2_code) cb,
		countries cc
where cc.a2_code = cb.a2_code and cb.a2_code = cs.a2_code and cs.a2_code = cg.a2_code


select * from athletes
order by id asc


-----------------------------------------------------------------------------------------------

select cc.name as country, cc.a2_code as countries_link, ifnull(cg.g,0) as g, ifnull(cs.s,0) as s, ifnull(cb.b,0) as b,  g*3 + s*2+b*1 as score 
from 
(select c.a2_code as a2_code,  ifnull(mg.gold,0) as g
from countries c
left join (select c.a2_code as a2_code , count(cs.medal),0 as gold
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "g"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) mg 
		on c.a2_code= mg.a2_code) cg
		--------------------------
		,
(select c.a2_code as a2_code, ifnull(mg.gold,0) as s
from countries c
left join (select c.a2_code as a2_code ,  count(cs.medal) as gold
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "s"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) mg 
		on c.a2_code= mg.a2_code) cs
		------------------------------
		,
		(select c.a2_code as a2_code, ifnull(mg.gold,0) as b
from countries c
left join (select c.a2_code as a2_code , count(cs.medal)as gold
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "b"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) mg 
		on c.a2_code= mg.a2_code) cb,
		countries cc
where cc.a2_code = cb.a2_code and cb.a2_code = cs.a2_code and cs.a2_code = cg.a2_code
order by score d

==========================
-----------------------------------------------------------------------------------------------------------------------------------------
select cc.name as country, cc.a2_code as countries_link, cg.g as g, cs.s as s, cb.b as b,
g+s+b as summe, g*3 +s *2 + b*1 as score
from 
(select c.a2_code as a2_code, ifnull(mg.gold,0) as g
from countries c
left join (select c.a2_code as a2_code , count(cs.medal) as gold
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "g"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) mg 
		on c.a2_code= mg.a2_code) cg
		--------------------------
		,
(select c.a2_code as a2_code, ifnull(mg.gold,0) as s
from countries c
left join (select c.a2_code as a2_code , ifnull(count(cs.medal),0) as gold
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "s"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) mg 
		on c.a2_code= mg.a2_code) cs
		------------------------------
		,
		(select c.a2_code as a2_code, ifnull(mg.gold,0) as b
from countries c
left join (select c.a2_code as a2_code , count(cs.medal) as gold
		from 
		(select c.a2_code as country, p.team as team,
			p.medal as medal
			from countries c, athletes a, events e, participants p
			where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id 
			and medal = "b"
			group by p.team
			order by c.a2_code)  cs,
			countries c
		where c.a2_code = cs.country
		group by country) mg 
		on c.a2_code= mg.a2_code) cb,
		countries cc
where cc.a2_code = cb.a2_code and cb.a2_code = cs.a2_code and cs.a2_code = cg.a2_code
order by score


----------------------------------------------

select e.name as event, e.id as events_link, p.medal as medal, s.name as sport
from countries c, athletes a, events e, participants p, sports s 
where c.a2_code = a.country and  p.event = e.id and p.athlete = a.id and c.a2_code = "it"
and medal = "s" and e.sport = s.id
group by p.team
order by c.a2_code

select (a.firstname || " " ||a.lastname) as name, a.id as athletes_link, a.gender as g, 
a.birthday as birthday
from athletes a, countries c
where a.country = c.a2_code and c.a2_code = "ru"


select *
from participants p
group by p.team


----------------------


